<% |
    String $site,
    String $conf_prefix,
            
    String $server_name,
    Array[String] $alt_names,
    Boolean $redirect_alt_names,
    Array[String] $bind,
    Array[Integer] $plain_ports,
    Array[Integer] $tls_ports,
    Boolean $redirect_plain,
    Boolean $proxy_protocol,
    Boolean $is_backend,
    Optional[Array[String]] $trusted_proxy,
            
    Array[Hash] $certs,
    Array[String] $apps,
    String $custom_conf,
    Boolean $robots_noindex,
    Optional[String] $require_realm,
    Optional[Array[String[1]]] $require_host_list,
    Optional[CfWeb::ClientX509] $require_x509,
    Optional[String[1]] $hsts,
|

if size($plain_ports) == 0 and size($tls_ports) == 0 {
    fail("At least one port must be configured for ${site}")
}

$redirect_plain_act = $redirect_plain and size($plain_ports) > 0 and size($tls_ports) > 0

$all_server_names = ([$server_name] + $alt_names).join(' ')
$cond_server_names = $redirect_alt_names ? {
    true => $server_name,
    default => $all_server_names
}

# Bind addresses
#---
$proxy_protocol_param = $proxy_protocol ? {
    true => 'proxy_protocol',
    default => ''
}
$listen_plain = flatten($bind.map |$b| {
    $plain_ports.map |$p| {
        "${b}:${p} ${proxy_protocol_param}"
    }
})
$listen_tls = flatten($bind.map |$b| {
    $tls_ports.map |$p| {
        "${b}:${p} ssl http2 ${proxy_protocol_param}"
    }
})

# Trust proxy protocol
#---
$trust_proxy_snippet = inline_epp('
<% if $proxy_protocol or $is_backend { -%>
<%  $trusted_proxy.each |$p| { -%>
    set_real_ip_from <%= $p %>;
<%  } -%>
<%  if $proxy_protocol { -%>
    real_ip_header proxy_protocol;
<%  } else { -%>
    real_ip_header X-Real-IP;
<%  } -%>
    real_ip_recursive off;
<% } -%>    
', {
    proxy_protocol => $proxy_protocol,
    is_backend => $is_backend,
    trusted_proxy => $trusted_proxy,
})

# SSL certs
#---
$tls_snippet = inline_epp('
<% if size($tls_ports) > 0 { -%>
<%  $certs.each |$c| { -%>
    ssl_certificate <%= $c[\'crt_file\'] %>;
    ssl_certificate_key <%= $c[\'key_file\'] %>;
<%  } -%>

<%  if pick($certs[0], {})[\'trusted_file\'] { -%>

    ssl_trusted_certificate <%= $certs[0][\'trusted_file\'] %>;
    ssl_stapling_verify on;    
    ssl_stapling on;
<%  } -%>

<% if $redirect_plain_act and !empty($hsts) { -%>
    add_header Strict-Transport-Security \'<%= $hsts %>\';
<% } -%>

<% } -%>
', {
})

$acme_challenge_snippet = "
    include /etc/nginx/cf_acme_challenge.conf;
"

-%>

<% $apps.each |$a| { -%>
include <%= "${conf_prefix}.global.${a}" %>;
<% } -%>


server {
    server_name <%= $cond_server_names %>;
    
<%  if !$redirect_plain_act { $listen_plain.each |$l| { -%>
    listen <%= $l %>;
<%  } } -%>
<%  $listen_tls.each |$l| { -%>
    listen <%= $l %>;
<%  } -%>

    # NOTE: it's not redundant, there are some fine moments in log handling in server block
    include /etc/nginx/log.conf;

<%= $tls_snippet -%>
<%= $trust_proxy_snippet -%>

    <%= cfweb::limit_conn($site, 'peraddrpersrv') %>

<% $apps.each |$a| { -%>
    include <%= "${conf_prefix}.server.${a}" %>;
<% } -%>

<% if $robots_noindex { -%>
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "
User-agent: *
Disallow: /

";
    }
<% } -%>

<% if $require_realm { -%>
    # Basic Auth
    #---
    auth_basic "<%= $require_realm %>";
    auth_basic_user_file <%= "${conf_prefix}.passwd" %>;
    #---
<% } -%>

<% if $require_host_list { -%>
    # Require client hosts
    #---
    <% $require_host_list.each |$h| { -%>
    allow <%= $h %>;
    <% } -%>
    deny all;
    #---
<% } -%>

<% if $require_x509 {
    if $require_x509 =~ String {
        $client_x509 = {
            clientpki => $require_x509,
        }
    } else {
        $client_x509 = $require_x509
    }
    $clientpki = $client_x509['clientpki']
    # the check is done in internal::clientpki
    $clientpki_conf = pick_default($cfweb::global::clientpki[$clientpki], {})
-%>
    # Require X.509 client certificates
    #---
    ssl_client_certificate <%= "${cfweb::nginx::clientpki_dir}/${clientpki}.ca.pem" %>;
<% if $clientpki_conf['crl'] or $clientpki_conf['crl_source'] { -%>
    ssl_crl <%= "${cfweb::nginx::clientpki_dir}/${clientpki}.crl.pem" %>;
<% } -%>
    ssl_verify_client <%= pick($client_x509['verify'], 'on') %>;
    ssl_verify_depth <%= pick($clientpki_conf['depth'], 1) %>;
<% } -%>
<%= $custom_conf -%>
}


<% if $redirect_plain_act { -%>
# standalone host should be faster
# redirect HTTP -> HTTPS
#---------------------------------
server {
    server_name <%= $cond_server_names %>;
    
<%  $listen_plain.each |$l| { -%>
    listen <%= $l %>;
<%  } -%>

    # NOTE: it's not redundant, there are some fine moments in log handling in server block
    include /etc/nginx/log.conf;
    
<%= $trust_proxy_snippet -%>
<%= $acme_challenge_snippet %>

    location / {
        return 302 https://$host$request_uri;
    }
}
<% } -%>

<% if $redirect_alt_names and size($alt_names) > 0 { -%>
# standalone host should be faster
# redirect ALT names -> main name
#---------------------------------
server {
    server_name <%= $alt_names.join(' ') %>;
    
    # NOTE: it's not redundant, there are some fine moments in log handling in server block
    include /etc/nginx/log.conf;

<%  $listen_plain.each |$l| { -%>
    listen <%= $l %>;
<%  } -%>
<%  $listen_tls.each |$l| { -%>
    listen <%= $l %>;
<%  } -%>
    
<%= $tls_snippet -%>
<%= $trust_proxy_snippet -%>
<%= $acme_challenge_snippet %>

    location / {
    <% if $redirect_plain_act { -%>
        return 302 https://<%= $server_name %>$request_uri;
    <% } else { -%>
        return 302 $scheme://<%= $server_name %>$request_uri;
    <% } -%>
    }
}
<% } -%>

